import { getVitalsPayload, getTokenTest, sendToOut } from './external.js';
import { updateStatusvitalBatch } from './updater.js';

export function startVitalTimer() {
  setInterval(async () => {
    const timestamp = new Date().toISOString();
    console.log(`‚è± Vital timer triggered at ${timestamp}`);

    try {
      // ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô start/end
      const today = new Date().toISOString().slice(0, 10);
      const payload = await getVitalsPayload(today, today);

      if (!Array.isArray(payload) || payload.length === 0) {
        console.log('üì≠ No new data to send');
        return;
      }

      const tokenRec = await getTokenTest(); // ‡∏´‡∏£‡∏∑‡∏≠ getToken() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
      const outResponse = await sendToOut(payload, tokenRec.token);

      if (String(outResponse.status_code) === '201') {
        await updateStatusvitalBatch(payload);
        console.log(`‚úÖ Auto update complete at ${timestamp}`);
      } else {
        console.warn(`‚ö†Ô∏è Send failed: ${outResponse.status_code} - ${outResponse.statusDesc}`);
        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° retry logic ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
      }
    } catch (err) {
      console.error(`‚ùå Vital timer error at ${timestamp}:`, err.message);
    }
  }, 1 * 60 * 1000); // ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
}